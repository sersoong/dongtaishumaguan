                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Display
                                     13 	.globl _DigDisplay
                                     14 	.globl _ShowNumber
                                     15 	.globl _delay
                                     16 	.globl _sprintf
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _DigDisplay_PARM_2
                                    114 	.globl _smgduan
                                    115 ;--------------------------------------------------------
                                    116 ; special function registers
                                    117 ;--------------------------------------------------------
                                    118 	.area RSEG    (ABS,DATA)
      000000                        119 	.org 0x0000
                           000080   120 G$P0$0_0$0 == 0x0080
                           000080   121 _P0	=	0x0080
                           000081   122 G$SP$0_0$0 == 0x0081
                           000081   123 _SP	=	0x0081
                           000082   124 G$DPL$0_0$0 == 0x0082
                           000082   125 _DPL	=	0x0082
                           000083   126 G$DPH$0_0$0 == 0x0083
                           000083   127 _DPH	=	0x0083
                           000087   128 G$PCON$0_0$0 == 0x0087
                           000087   129 _PCON	=	0x0087
                           000088   130 G$TCON$0_0$0 == 0x0088
                           000088   131 _TCON	=	0x0088
                           000089   132 G$TMOD$0_0$0 == 0x0089
                           000089   133 _TMOD	=	0x0089
                           00008A   134 G$TL0$0_0$0 == 0x008a
                           00008A   135 _TL0	=	0x008a
                           00008B   136 G$TL1$0_0$0 == 0x008b
                           00008B   137 _TL1	=	0x008b
                           00008C   138 G$TH0$0_0$0 == 0x008c
                           00008C   139 _TH0	=	0x008c
                           00008D   140 G$TH1$0_0$0 == 0x008d
                           00008D   141 _TH1	=	0x008d
                           000090   142 G$P1$0_0$0 == 0x0090
                           000090   143 _P1	=	0x0090
                           000098   144 G$SCON$0_0$0 == 0x0098
                           000098   145 _SCON	=	0x0098
                           000099   146 G$SBUF$0_0$0 == 0x0099
                           000099   147 _SBUF	=	0x0099
                           0000A0   148 G$P2$0_0$0 == 0x00a0
                           0000A0   149 _P2	=	0x00a0
                           0000A8   150 G$IE$0_0$0 == 0x00a8
                           0000A8   151 _IE	=	0x00a8
                           0000B0   152 G$P3$0_0$0 == 0x00b0
                           0000B0   153 _P3	=	0x00b0
                           0000B8   154 G$IP$0_0$0 == 0x00b8
                           0000B8   155 _IP	=	0x00b8
                           0000D0   156 G$PSW$0_0$0 == 0x00d0
                           0000D0   157 _PSW	=	0x00d0
                           0000E0   158 G$ACC$0_0$0 == 0x00e0
                           0000E0   159 _ACC	=	0x00e0
                           0000F0   160 G$B$0_0$0 == 0x00f0
                           0000F0   161 _B	=	0x00f0
                                    162 ;--------------------------------------------------------
                                    163 ; special function bits
                                    164 ;--------------------------------------------------------
                                    165 	.area RSEG    (ABS,DATA)
      000000                        166 	.org 0x0000
                           000080   167 G$P0_0$0_0$0 == 0x0080
                           000080   168 _P0_0	=	0x0080
                           000081   169 G$P0_1$0_0$0 == 0x0081
                           000081   170 _P0_1	=	0x0081
                           000082   171 G$P0_2$0_0$0 == 0x0082
                           000082   172 _P0_2	=	0x0082
                           000083   173 G$P0_3$0_0$0 == 0x0083
                           000083   174 _P0_3	=	0x0083
                           000084   175 G$P0_4$0_0$0 == 0x0084
                           000084   176 _P0_4	=	0x0084
                           000085   177 G$P0_5$0_0$0 == 0x0085
                           000085   178 _P0_5	=	0x0085
                           000086   179 G$P0_6$0_0$0 == 0x0086
                           000086   180 _P0_6	=	0x0086
                           000087   181 G$P0_7$0_0$0 == 0x0087
                           000087   182 _P0_7	=	0x0087
                           000088   183 G$IT0$0_0$0 == 0x0088
                           000088   184 _IT0	=	0x0088
                           000089   185 G$IE0$0_0$0 == 0x0089
                           000089   186 _IE0	=	0x0089
                           00008A   187 G$IT1$0_0$0 == 0x008a
                           00008A   188 _IT1	=	0x008a
                           00008B   189 G$IE1$0_0$0 == 0x008b
                           00008B   190 _IE1	=	0x008b
                           00008C   191 G$TR0$0_0$0 == 0x008c
                           00008C   192 _TR0	=	0x008c
                           00008D   193 G$TF0$0_0$0 == 0x008d
                           00008D   194 _TF0	=	0x008d
                           00008E   195 G$TR1$0_0$0 == 0x008e
                           00008E   196 _TR1	=	0x008e
                           00008F   197 G$TF1$0_0$0 == 0x008f
                           00008F   198 _TF1	=	0x008f
                           000090   199 G$P1_0$0_0$0 == 0x0090
                           000090   200 _P1_0	=	0x0090
                           000091   201 G$P1_1$0_0$0 == 0x0091
                           000091   202 _P1_1	=	0x0091
                           000092   203 G$P1_2$0_0$0 == 0x0092
                           000092   204 _P1_2	=	0x0092
                           000093   205 G$P1_3$0_0$0 == 0x0093
                           000093   206 _P1_3	=	0x0093
                           000094   207 G$P1_4$0_0$0 == 0x0094
                           000094   208 _P1_4	=	0x0094
                           000095   209 G$P1_5$0_0$0 == 0x0095
                           000095   210 _P1_5	=	0x0095
                           000096   211 G$P1_6$0_0$0 == 0x0096
                           000096   212 _P1_6	=	0x0096
                           000097   213 G$P1_7$0_0$0 == 0x0097
                           000097   214 _P1_7	=	0x0097
                           000098   215 G$RI$0_0$0 == 0x0098
                           000098   216 _RI	=	0x0098
                           000099   217 G$TI$0_0$0 == 0x0099
                           000099   218 _TI	=	0x0099
                           00009A   219 G$RB8$0_0$0 == 0x009a
                           00009A   220 _RB8	=	0x009a
                           00009B   221 G$TB8$0_0$0 == 0x009b
                           00009B   222 _TB8	=	0x009b
                           00009C   223 G$REN$0_0$0 == 0x009c
                           00009C   224 _REN	=	0x009c
                           00009D   225 G$SM2$0_0$0 == 0x009d
                           00009D   226 _SM2	=	0x009d
                           00009E   227 G$SM1$0_0$0 == 0x009e
                           00009E   228 _SM1	=	0x009e
                           00009F   229 G$SM0$0_0$0 == 0x009f
                           00009F   230 _SM0	=	0x009f
                           0000A0   231 G$P2_0$0_0$0 == 0x00a0
                           0000A0   232 _P2_0	=	0x00a0
                           0000A1   233 G$P2_1$0_0$0 == 0x00a1
                           0000A1   234 _P2_1	=	0x00a1
                           0000A2   235 G$P2_2$0_0$0 == 0x00a2
                           0000A2   236 _P2_2	=	0x00a2
                           0000A3   237 G$P2_3$0_0$0 == 0x00a3
                           0000A3   238 _P2_3	=	0x00a3
                           0000A4   239 G$P2_4$0_0$0 == 0x00a4
                           0000A4   240 _P2_4	=	0x00a4
                           0000A5   241 G$P2_5$0_0$0 == 0x00a5
                           0000A5   242 _P2_5	=	0x00a5
                           0000A6   243 G$P2_6$0_0$0 == 0x00a6
                           0000A6   244 _P2_6	=	0x00a6
                           0000A7   245 G$P2_7$0_0$0 == 0x00a7
                           0000A7   246 _P2_7	=	0x00a7
                           0000A8   247 G$EX0$0_0$0 == 0x00a8
                           0000A8   248 _EX0	=	0x00a8
                           0000A9   249 G$ET0$0_0$0 == 0x00a9
                           0000A9   250 _ET0	=	0x00a9
                           0000AA   251 G$EX1$0_0$0 == 0x00aa
                           0000AA   252 _EX1	=	0x00aa
                           0000AB   253 G$ET1$0_0$0 == 0x00ab
                           0000AB   254 _ET1	=	0x00ab
                           0000AC   255 G$ES$0_0$0 == 0x00ac
                           0000AC   256 _ES	=	0x00ac
                           0000AF   257 G$EA$0_0$0 == 0x00af
                           0000AF   258 _EA	=	0x00af
                           0000B0   259 G$P3_0$0_0$0 == 0x00b0
                           0000B0   260 _P3_0	=	0x00b0
                           0000B1   261 G$P3_1$0_0$0 == 0x00b1
                           0000B1   262 _P3_1	=	0x00b1
                           0000B2   263 G$P3_2$0_0$0 == 0x00b2
                           0000B2   264 _P3_2	=	0x00b2
                           0000B3   265 G$P3_3$0_0$0 == 0x00b3
                           0000B3   266 _P3_3	=	0x00b3
                           0000B4   267 G$P3_4$0_0$0 == 0x00b4
                           0000B4   268 _P3_4	=	0x00b4
                           0000B5   269 G$P3_5$0_0$0 == 0x00b5
                           0000B5   270 _P3_5	=	0x00b5
                           0000B6   271 G$P3_6$0_0$0 == 0x00b6
                           0000B6   272 _P3_6	=	0x00b6
                           0000B7   273 G$P3_7$0_0$0 == 0x00b7
                           0000B7   274 _P3_7	=	0x00b7
                           0000B0   275 G$RXD$0_0$0 == 0x00b0
                           0000B0   276 _RXD	=	0x00b0
                           0000B1   277 G$TXD$0_0$0 == 0x00b1
                           0000B1   278 _TXD	=	0x00b1
                           0000B2   279 G$INT0$0_0$0 == 0x00b2
                           0000B2   280 _INT0	=	0x00b2
                           0000B3   281 G$INT1$0_0$0 == 0x00b3
                           0000B3   282 _INT1	=	0x00b3
                           0000B4   283 G$T0$0_0$0 == 0x00b4
                           0000B4   284 _T0	=	0x00b4
                           0000B5   285 G$T1$0_0$0 == 0x00b5
                           0000B5   286 _T1	=	0x00b5
                           0000B6   287 G$WR$0_0$0 == 0x00b6
                           0000B6   288 _WR	=	0x00b6
                           0000B7   289 G$RD$0_0$0 == 0x00b7
                           0000B7   290 _RD	=	0x00b7
                           0000B8   291 G$PX0$0_0$0 == 0x00b8
                           0000B8   292 _PX0	=	0x00b8
                           0000B9   293 G$PT0$0_0$0 == 0x00b9
                           0000B9   294 _PT0	=	0x00b9
                           0000BA   295 G$PX1$0_0$0 == 0x00ba
                           0000BA   296 _PX1	=	0x00ba
                           0000BB   297 G$PT1$0_0$0 == 0x00bb
                           0000BB   298 _PT1	=	0x00bb
                           0000BC   299 G$PS$0_0$0 == 0x00bc
                           0000BC   300 _PS	=	0x00bc
                           0000D0   301 G$P$0_0$0 == 0x00d0
                           0000D0   302 _P	=	0x00d0
                           0000D1   303 G$F1$0_0$0 == 0x00d1
                           0000D1   304 _F1	=	0x00d1
                           0000D2   305 G$OV$0_0$0 == 0x00d2
                           0000D2   306 _OV	=	0x00d2
                           0000D3   307 G$RS0$0_0$0 == 0x00d3
                           0000D3   308 _RS0	=	0x00d3
                           0000D4   309 G$RS1$0_0$0 == 0x00d4
                           0000D4   310 _RS1	=	0x00d4
                           0000D5   311 G$F0$0_0$0 == 0x00d5
                           0000D5   312 _F0	=	0x00d5
                           0000D6   313 G$AC$0_0$0 == 0x00d6
                           0000D6   314 _AC	=	0x00d6
                           0000D7   315 G$CY$0_0$0 == 0x00d7
                           0000D7   316 _CY	=	0x00d7
                                    317 ;--------------------------------------------------------
                                    318 ; overlayable register banks
                                    319 ;--------------------------------------------------------
                                    320 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        321 	.ds 8
                                    322 ;--------------------------------------------------------
                                    323 ; internal ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area DSEG    (DATA)
                           000000   326 G$smgduan$0_0$0==.
      000000                        327 _smgduan::
      000000                        328 	.ds 17
                           000011   329 Lmain.DigDisplay$num$1_0$47==.
      000011                        330 _DigDisplay_PARM_2:
      000011                        331 	.ds 1
                           000012   332 Lmain.main$c$1_0$53==.
      000012                        333 _main_c_65536_53:
      000012                        334 	.ds 8
                                    335 ;--------------------------------------------------------
                                    336 ; overlayable items in internal ram 
                                    337 ;--------------------------------------------------------
                                    338 	.area	OSEG    (OVR,DATA)
                                    339 ;--------------------------------------------------------
                                    340 ; Stack segment in internal ram 
                                    341 ;--------------------------------------------------------
                                    342 	.area	SSEG
      000000                        343 __start__stack:
      000000                        344 	.ds	1
                                    345 
                                    346 ;--------------------------------------------------------
                                    347 ; indirectly addressable internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area ISEG    (DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; absolute internal ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area IABS    (ABS,DATA)
                                    354 	.area IABS    (ABS,DATA)
                                    355 ;--------------------------------------------------------
                                    356 ; bit data
                                    357 ;--------------------------------------------------------
                                    358 	.area BSEG    (BIT)
                                    359 ;--------------------------------------------------------
                                    360 ; paged external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area PSEG    (PAG,XDATA)
                                    363 ;--------------------------------------------------------
                                    364 ; external ram data
                                    365 ;--------------------------------------------------------
                                    366 	.area XSEG    (XDATA)
                                    367 ;--------------------------------------------------------
                                    368 ; absolute external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XABS    (ABS,XDATA)
                                    371 ;--------------------------------------------------------
                                    372 ; external initialized ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area XISEG   (XDATA)
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT0 (CODE)
                                    377 	.area GSINIT1 (CODE)
                                    378 	.area GSINIT2 (CODE)
                                    379 	.area GSINIT3 (CODE)
                                    380 	.area GSINIT4 (CODE)
                                    381 	.area GSINIT5 (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.area GSFINAL (CODE)
                                    384 	.area CSEG    (CODE)
                                    385 ;--------------------------------------------------------
                                    386 ; interrupt vector 
                                    387 ;--------------------------------------------------------
                                    388 	.area HOME    (CODE)
      000000                        389 __interrupt_vect:
      000000 02r00r00         [24]  390 	ljmp	__sdcc_gsinit_startup
                                    391 ;--------------------------------------------------------
                                    392 ; global & static initialisations
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
                                    395 	.area GSINIT  (CODE)
                                    396 	.area GSFINAL (CODE)
                                    397 	.area GSINIT  (CODE)
                                    398 	.globl __sdcc_gsinit_startup
                                    399 	.globl __sdcc_program_startup
                                    400 	.globl __start__stack
                                    401 	.globl __mcs51_genXINIT
                                    402 	.globl __mcs51_genXRAMCLEAR
                                    403 	.globl __mcs51_genRAMCLEAR
                           000000   404 	C$main.c$9$1_0$53 ==.
                                    405 ;	main.c:9: u8 smgduan[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
      000000 75*00 3F         [24]  406 	mov	_smgduan,#0x3f
      000003 75*01 06         [24]  407 	mov	(_smgduan + 0x0001),#0x06
      000006 75*02 5B         [24]  408 	mov	(_smgduan + 0x0002),#0x5b
      000009 75*03 4F         [24]  409 	mov	(_smgduan + 0x0003),#0x4f
      00000C 75*04 66         [24]  410 	mov	(_smgduan + 0x0004),#0x66
      00000F 75*05 6D         [24]  411 	mov	(_smgduan + 0x0005),#0x6d
      000012 75*06 7D         [24]  412 	mov	(_smgduan + 0x0006),#0x7d
      000015 75*07 07         [24]  413 	mov	(_smgduan + 0x0007),#0x07
      000018 75*08 7F         [24]  414 	mov	(_smgduan + 0x0008),#0x7f
      00001B 75*09 6F         [24]  415 	mov	(_smgduan + 0x0009),#0x6f
      00001E 75*0A 77         [24]  416 	mov	(_smgduan + 0x000a),#0x77
      000021 75*0B 7C         [24]  417 	mov	(_smgduan + 0x000b),#0x7c
      000024 75*0C 39         [24]  418 	mov	(_smgduan + 0x000c),#0x39
      000027 75*0D 5E         [24]  419 	mov	(_smgduan + 0x000d),#0x5e
      00002A 75*0E 79         [24]  420 	mov	(_smgduan + 0x000e),#0x79
      00002D 75*0F 71         [24]  421 	mov	(_smgduan + 0x000f),#0x71
                                    422 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  423 	ljmp	__sdcc_program_startup
                                    424 ;--------------------------------------------------------
                                    425 ; Home
                                    426 ;--------------------------------------------------------
                                    427 	.area HOME    (CODE)
                                    428 	.area HOME    (CODE)
      000003                        429 __sdcc_program_startup:
      000003 02r02r70         [24]  430 	ljmp	_main
                                    431 ;	return from main will return to caller
                                    432 ;--------------------------------------------------------
                                    433 ; code
                                    434 ;--------------------------------------------------------
                                    435 	.area CSEG    (CODE)
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'delay'
                                    438 ;------------------------------------------------------------
                                    439 ;i                         Allocated to registers 
                                    440 ;------------------------------------------------------------
                           000000   441 	G$delay$0$0 ==.
                           000000   442 	C$main.c$12$0_0$43 ==.
                                    443 ;	main.c:12: void delay(long i)
                                    444 ;	-----------------------------------------
                                    445 ;	 function delay
                                    446 ;	-----------------------------------------
      000000                        447 _delay:
                           000007   448 	ar7 = 0x07
                           000006   449 	ar6 = 0x06
                           000005   450 	ar5 = 0x05
                           000004   451 	ar4 = 0x04
                           000003   452 	ar3 = 0x03
                           000002   453 	ar2 = 0x02
                           000001   454 	ar1 = 0x01
                           000000   455 	ar0 = 0x00
      000000 AC 82            [24]  456 	mov	r4,dpl
      000002 AD 83            [24]  457 	mov	r5,dph
      000004 AE F0            [24]  458 	mov	r6,b
      000006 FF               [12]  459 	mov	r7,a
                           000007   460 	C$main.c$14$1_0$43 ==.
                                    461 ;	main.c:14: while(i--);
      000007                        462 00101$:
      000007 8C 00            [24]  463 	mov	ar0,r4
      000009 8D 01            [24]  464 	mov	ar1,r5
      00000B 8E 02            [24]  465 	mov	ar2,r6
      00000D 8F 03            [24]  466 	mov	ar3,r7
      00000F 1C               [12]  467 	dec	r4
      000010 BC FF 09         [24]  468 	cjne	r4,#0xff,00111$
      000013 1D               [12]  469 	dec	r5
      000014 BD FF 05         [24]  470 	cjne	r5,#0xff,00111$
      000017 1E               [12]  471 	dec	r6
      000018 BE FF 01         [24]  472 	cjne	r6,#0xff,00111$
      00001B 1F               [12]  473 	dec	r7
      00001C                        474 00111$:
      00001C E8               [12]  475 	mov	a,r0
      00001D 49               [12]  476 	orl	a,r1
      00001E 4A               [12]  477 	orl	a,r2
      00001F 4B               [12]  478 	orl	a,r3
      000020 70 E5            [24]  479 	jnz	00101$
                           000022   480 	C$main.c$15$1_0$43 ==.
                                    481 ;	main.c:15: }
                           000022   482 	C$main.c$15$1_0$43 ==.
                           000022   483 	XG$delay$0$0 ==.
      000022 22               [24]  484 	ret
                                    485 ;------------------------------------------------------------
                                    486 ;Allocation info for local variables in function 'ShowNumber'
                                    487 ;------------------------------------------------------------
                                    488 ;num                       Allocated to registers r7 
                                    489 ;i                         Allocated to registers r5 r6 
                                    490 ;------------------------------------------------------------
                           000023   491 	G$ShowNumber$0$0 ==.
                           000023   492 	C$main.c$17$1_0$45 ==.
                                    493 ;	main.c:17: void ShowNumber(u8 num){
                                    494 ;	-----------------------------------------
                                    495 ;	 function ShowNumber
                                    496 ;	-----------------------------------------
      000023                        497 _ShowNumber:
      000023 AF 82            [24]  498 	mov	r7,dpl
                           000025   499 	C$main.c$18$2_0$45 ==.
                                    500 ;	main.c:18: int i=0;
      000025 7D 00            [12]  501 	mov	r5,#0x00
      000027 7E 00            [12]  502 	mov	r6,#0x00
                           000029   503 	C$main.c$19$1_0$45 ==.
                                    504 ;	main.c:19: switch(num)
      000029 BF 30 00         [24]  505 	cjne	r7,#0x30,00128$
      00002C                        506 00128$:
      00002C 50 03            [24]  507 	jnc	00129$
      00002E 02r00rD6         [24]  508 	ljmp	00117$
      000031                        509 00129$:
      000031 EF               [12]  510 	mov	a,r7
      000032 24 B9            [12]  511 	add	a,#0xff - 0x46
      000034 50 03            [24]  512 	jnc	00130$
      000036 02r00rD6         [24]  513 	ljmp	00117$
      000039                        514 00130$:
      000039 EF               [12]  515 	mov	a,r7
      00003A 24 D0            [12]  516 	add	a,#0xd0
      00003C FF               [12]  517 	mov	r7,a
      00003D 24 0A            [12]  518 	add	a,#(00131$-3-.)
      00003F 83               [24]  519 	movc	a,@a+pc
      000040 F5 82            [12]  520 	mov	dpl,a
      000042 EF               [12]  521 	mov	a,r7
      000043 24 1B            [12]  522 	add	a,#(00132$-3-.)
      000045 83               [24]  523 	movc	a,@a+pc
      000046 F5 83            [12]  524 	mov	dph,a
      000048 E4               [12]  525 	clr	a
      000049 73               [24]  526 	jmp	@a+dptr
      00004A                        527 00131$:
      00004Ar78                     528 	.db	00101$
      00004Br7E                     529 	.db	00102$
      00004Cr84                     530 	.db	00103$
      00004Dr8A                     531 	.db	00104$
      00004Er90                     532 	.db	00105$
      00004Fr96                     533 	.db	00106$
      000050r9C                     534 	.db	00107$
      000051rA2                     535 	.db	00108$
      000052rA8                     536 	.db	00109$
      000053rAE                     537 	.db	00110$
      000054rD6                     538 	.db	00117$
      000055rD6                     539 	.db	00117$
      000056rD6                     540 	.db	00117$
      000057rD6                     541 	.db	00117$
      000058rD6                     542 	.db	00117$
      000059rD6                     543 	.db	00117$
      00005ArD6                     544 	.db	00117$
      00005BrB4                     545 	.db	00111$
      00005CrBA                     546 	.db	00112$
      00005DrC0                     547 	.db	00113$
      00005ErC6                     548 	.db	00114$
      00005FrCC                     549 	.db	00115$
      000060rD2                     550 	.db	00116$
      000061                        551 00132$:
      000061s00                     552 	.db	00101$>>8
      000062s00                     553 	.db	00102$>>8
      000063s00                     554 	.db	00103$>>8
      000064s00                     555 	.db	00104$>>8
      000065s00                     556 	.db	00105$>>8
      000066s00                     557 	.db	00106$>>8
      000067s00                     558 	.db	00107$>>8
      000068s00                     559 	.db	00108$>>8
      000069s00                     560 	.db	00109$>>8
      00006As00                     561 	.db	00110$>>8
      00006Bs00                     562 	.db	00117$>>8
      00006Cs00                     563 	.db	00117$>>8
      00006Ds00                     564 	.db	00117$>>8
      00006Es00                     565 	.db	00117$>>8
      00006Fs00                     566 	.db	00117$>>8
      000070s00                     567 	.db	00117$>>8
      000071s00                     568 	.db	00117$>>8
      000072s00                     569 	.db	00111$>>8
      000073s00                     570 	.db	00112$>>8
      000074s00                     571 	.db	00113$>>8
      000075s00                     572 	.db	00114$>>8
      000076s00                     573 	.db	00115$>>8
      000077s00                     574 	.db	00116$>>8
                           000078   575 	C$main.c$21$2_0$46 ==.
                                    576 ;	main.c:21: case('0'):
      000078                        577 00101$:
                           000078   578 	C$main.c$22$2_0$46 ==.
                                    579 ;	main.c:22: i=0;
      000078 7D 00            [12]  580 	mov	r5,#0x00
      00007A 7E 00            [12]  581 	mov	r6,#0x00
                           00007C   582 	C$main.c$23$2_0$46 ==.
                                    583 ;	main.c:23: break;
                           00007C   584 	C$main.c$24$2_0$46 ==.
                                    585 ;	main.c:24: case('1'):
      00007C 80 58            [24]  586 	sjmp	00117$
      00007E                        587 00102$:
                           00007E   588 	C$main.c$25$2_0$46 ==.
                                    589 ;	main.c:25: i=1;
      00007E 7D 01            [12]  590 	mov	r5,#0x01
      000080 7E 00            [12]  591 	mov	r6,#0x00
                           000082   592 	C$main.c$26$2_0$46 ==.
                                    593 ;	main.c:26: break;
                           000082   594 	C$main.c$27$2_0$46 ==.
                                    595 ;	main.c:27: case('2'):
      000082 80 52            [24]  596 	sjmp	00117$
      000084                        597 00103$:
                           000084   598 	C$main.c$28$2_0$46 ==.
                                    599 ;	main.c:28: i=2;
      000084 7D 02            [12]  600 	mov	r5,#0x02
      000086 7E 00            [12]  601 	mov	r6,#0x00
                           000088   602 	C$main.c$29$2_0$46 ==.
                                    603 ;	main.c:29: break;
                           000088   604 	C$main.c$30$2_0$46 ==.
                                    605 ;	main.c:30: case('3'):
      000088 80 4C            [24]  606 	sjmp	00117$
      00008A                        607 00104$:
                           00008A   608 	C$main.c$31$2_0$46 ==.
                                    609 ;	main.c:31: i=3;
      00008A 7D 03            [12]  610 	mov	r5,#0x03
      00008C 7E 00            [12]  611 	mov	r6,#0x00
                           00008E   612 	C$main.c$32$2_0$46 ==.
                                    613 ;	main.c:32: break;
                           00008E   614 	C$main.c$33$2_0$46 ==.
                                    615 ;	main.c:33: case('4'):
      00008E 80 46            [24]  616 	sjmp	00117$
      000090                        617 00105$:
                           000090   618 	C$main.c$34$2_0$46 ==.
                                    619 ;	main.c:34: i=4;
      000090 7D 04            [12]  620 	mov	r5,#0x04
      000092 7E 00            [12]  621 	mov	r6,#0x00
                           000094   622 	C$main.c$35$2_0$46 ==.
                                    623 ;	main.c:35: break;
                           000094   624 	C$main.c$36$2_0$46 ==.
                                    625 ;	main.c:36: case('5'):
      000094 80 40            [24]  626 	sjmp	00117$
      000096                        627 00106$:
                           000096   628 	C$main.c$37$2_0$46 ==.
                                    629 ;	main.c:37: i=5;
      000096 7D 05            [12]  630 	mov	r5,#0x05
      000098 7E 00            [12]  631 	mov	r6,#0x00
                           00009A   632 	C$main.c$38$2_0$46 ==.
                                    633 ;	main.c:38: break;
                           00009A   634 	C$main.c$39$2_0$46 ==.
                                    635 ;	main.c:39: case('6'):
      00009A 80 3A            [24]  636 	sjmp	00117$
      00009C                        637 00107$:
                           00009C   638 	C$main.c$40$2_0$46 ==.
                                    639 ;	main.c:40: i=6;
      00009C 7D 06            [12]  640 	mov	r5,#0x06
      00009E 7E 00            [12]  641 	mov	r6,#0x00
                           0000A0   642 	C$main.c$41$2_0$46 ==.
                                    643 ;	main.c:41: break;
                           0000A0   644 	C$main.c$42$2_0$46 ==.
                                    645 ;	main.c:42: case('7'):
      0000A0 80 34            [24]  646 	sjmp	00117$
      0000A2                        647 00108$:
                           0000A2   648 	C$main.c$43$2_0$46 ==.
                                    649 ;	main.c:43: i=7;
      0000A2 7D 07            [12]  650 	mov	r5,#0x07
      0000A4 7E 00            [12]  651 	mov	r6,#0x00
                           0000A6   652 	C$main.c$44$2_0$46 ==.
                                    653 ;	main.c:44: break;
                           0000A6   654 	C$main.c$45$2_0$46 ==.
                                    655 ;	main.c:45: case('8'):
      0000A6 80 2E            [24]  656 	sjmp	00117$
      0000A8                        657 00109$:
                           0000A8   658 	C$main.c$46$2_0$46 ==.
                                    659 ;	main.c:46: i=8;
      0000A8 7D 08            [12]  660 	mov	r5,#0x08
      0000AA 7E 00            [12]  661 	mov	r6,#0x00
                           0000AC   662 	C$main.c$47$2_0$46 ==.
                                    663 ;	main.c:47: break;
                           0000AC   664 	C$main.c$48$2_0$46 ==.
                                    665 ;	main.c:48: case('9'):
      0000AC 80 28            [24]  666 	sjmp	00117$
      0000AE                        667 00110$:
                           0000AE   668 	C$main.c$49$2_0$46 ==.
                                    669 ;	main.c:49: i=9;
      0000AE 7D 09            [12]  670 	mov	r5,#0x09
      0000B0 7E 00            [12]  671 	mov	r6,#0x00
                           0000B2   672 	C$main.c$50$2_0$46 ==.
                                    673 ;	main.c:50: break;
                           0000B2   674 	C$main.c$51$2_0$46 ==.
                                    675 ;	main.c:51: case('A'):
      0000B2 80 22            [24]  676 	sjmp	00117$
      0000B4                        677 00111$:
                           0000B4   678 	C$main.c$52$2_0$46 ==.
                                    679 ;	main.c:52: i=10;
      0000B4 7D 0A            [12]  680 	mov	r5,#0x0a
      0000B6 7E 00            [12]  681 	mov	r6,#0x00
                           0000B8   682 	C$main.c$53$2_0$46 ==.
                                    683 ;	main.c:53: break;
                           0000B8   684 	C$main.c$54$2_0$46 ==.
                                    685 ;	main.c:54: case('B'):
      0000B8 80 1C            [24]  686 	sjmp	00117$
      0000BA                        687 00112$:
                           0000BA   688 	C$main.c$55$2_0$46 ==.
                                    689 ;	main.c:55: i=11;
      0000BA 7D 0B            [12]  690 	mov	r5,#0x0b
      0000BC 7E 00            [12]  691 	mov	r6,#0x00
                           0000BE   692 	C$main.c$56$2_0$46 ==.
                                    693 ;	main.c:56: break;
                           0000BE   694 	C$main.c$57$2_0$46 ==.
                                    695 ;	main.c:57: case('C'):
      0000BE 80 16            [24]  696 	sjmp	00117$
      0000C0                        697 00113$:
                           0000C0   698 	C$main.c$58$2_0$46 ==.
                                    699 ;	main.c:58: i=12;
      0000C0 7D 0C            [12]  700 	mov	r5,#0x0c
      0000C2 7E 00            [12]  701 	mov	r6,#0x00
                           0000C4   702 	C$main.c$59$2_0$46 ==.
                                    703 ;	main.c:59: break;
                           0000C4   704 	C$main.c$60$2_0$46 ==.
                                    705 ;	main.c:60: case('D'):
      0000C4 80 10            [24]  706 	sjmp	00117$
      0000C6                        707 00114$:
                           0000C6   708 	C$main.c$61$2_0$46 ==.
                                    709 ;	main.c:61: i=13;
      0000C6 7D 0D            [12]  710 	mov	r5,#0x0d
      0000C8 7E 00            [12]  711 	mov	r6,#0x00
                           0000CA   712 	C$main.c$62$2_0$46 ==.
                                    713 ;	main.c:62: break;
                           0000CA   714 	C$main.c$63$2_0$46 ==.
                                    715 ;	main.c:63: case('E'):
      0000CA 80 0A            [24]  716 	sjmp	00117$
      0000CC                        717 00115$:
                           0000CC   718 	C$main.c$64$2_0$46 ==.
                                    719 ;	main.c:64: i=14;
      0000CC 7D 0E            [12]  720 	mov	r5,#0x0e
      0000CE 7E 00            [12]  721 	mov	r6,#0x00
                           0000D0   722 	C$main.c$65$2_0$46 ==.
                                    723 ;	main.c:65: break;
                           0000D0   724 	C$main.c$66$2_0$46 ==.
                                    725 ;	main.c:66: case('F'):
      0000D0 80 04            [24]  726 	sjmp	00117$
      0000D2                        727 00116$:
                           0000D2   728 	C$main.c$67$2_0$46 ==.
                                    729 ;	main.c:67: i=15;
      0000D2 7D 0F            [12]  730 	mov	r5,#0x0f
      0000D4 7E 00            [12]  731 	mov	r6,#0x00
                           0000D6   732 	C$main.c$69$1_0$45 ==.
                                    733 ;	main.c:69: }
      0000D6                        734 00117$:
                           0000D6   735 	C$main.c$71$1_0$45 ==.
                                    736 ;	main.c:71: P0=smgduan[i];
      0000D6 ED               [12]  737 	mov	a,r5
      0000D7 24r00            [12]  738 	add	a,#_smgduan
      0000D9 F9               [12]  739 	mov	r1,a
      0000DA 87 80            [24]  740 	mov	_P0,@r1
                           0000DC   741 	C$main.c$72$1_0$45 ==.
                                    742 ;	main.c:72: delay(100);
      0000DC 90 00 64         [24]  743 	mov	dptr,#(0x64&0x00ff)
      0000DF E4               [12]  744 	clr	a
      0000E0 F5 F0            [12]  745 	mov	b,a
      0000E2 12r00r00         [24]  746 	lcall	_delay
                           0000E5   747 	C$main.c$73$1_0$45 ==.
                                    748 ;	main.c:73: P0=0;
      0000E5 75 80 00         [24]  749 	mov	_P0,#0x00
                           0000E8   750 	C$main.c$74$1_0$45 ==.
                                    751 ;	main.c:74: }
                           0000E8   752 	C$main.c$74$1_0$45 ==.
                           0000E8   753 	XG$ShowNumber$0$0 ==.
      0000E8 22               [24]  754 	ret
                                    755 ;------------------------------------------------------------
                                    756 ;Allocation info for local variables in function 'DigDisplay'
                                    757 ;------------------------------------------------------------
                                    758 ;num                       Allocated with name '_DigDisplay_PARM_2'
                                    759 ;i                         Allocated to registers r7 
                                    760 ;------------------------------------------------------------
                           0000E9   761 	G$DigDisplay$0$0 ==.
                           0000E9   762 	C$main.c$76$1_0$48 ==.
                                    763 ;	main.c:76: void DigDisplay(u8 i,u8 num) {
                                    764 ;	-----------------------------------------
                                    765 ;	 function DigDisplay
                                    766 ;	-----------------------------------------
      0000E9                        767 _DigDisplay:
                           0000E9   768 	C$main.c$77$1_0$48 ==.
                                    769 ;	main.c:77: switch(i){
      0000E9 E5 82            [12]  770 	mov	a,dpl
      0000EB FF               [12]  771 	mov	r7,a
      0000EC 24 F8            [12]  772 	add	a,#0xff - 0x07
      0000EE 50 03            [24]  773 	jnc	00116$
      0000F0 02r01r4F         [24]  774 	ljmp	00109$
      0000F3                        775 00116$:
      0000F3 EF               [12]  776 	mov	a,r7
      0000F4 24 0A            [12]  777 	add	a,#(00117$-3-.)
      0000F6 83               [24]  778 	movc	a,@a+pc
      0000F7 F5 82            [12]  779 	mov	dpl,a
      0000F9 EF               [12]  780 	mov	a,r7
      0000FA 24 0C            [12]  781 	add	a,#(00118$-3-.)
      0000FC 83               [24]  782 	movc	a,@a+pc
      0000FD F5 83            [12]  783 	mov	dph,a
      0000FF E4               [12]  784 	clr	a
      000100 73               [24]  785 	jmp	@a+dptr
      000101                        786 00117$:
      000101r11                     787 	.db	00101$
      000102r19                     788 	.db	00102$
      000103r21                     789 	.db	00103$
      000104r29                     790 	.db	00104$
      000105r31                     791 	.db	00105$
      000106r39                     792 	.db	00106$
      000107r41                     793 	.db	00107$
      000108r49                     794 	.db	00108$
      000109                        795 00118$:
      000109s01                     796 	.db	00101$>>8
      00010As01                     797 	.db	00102$>>8
      00010Bs01                     798 	.db	00103$>>8
      00010Cs01                     799 	.db	00104$>>8
      00010Ds01                     800 	.db	00105$>>8
      00010Es01                     801 	.db	00106$>>8
      00010Fs01                     802 	.db	00107$>>8
      000110s01                     803 	.db	00108$>>8
                           000111   804 	C$main.c$78$2_0$49 ==.
                                    805 ;	main.c:78: case(0):
      000111                        806 00101$:
                           000111   807 	C$main.c$79$2_0$49 ==.
                                    808 ;	main.c:79: P2_0=0;P2_1=0;P2_2=0;
                                    809 ;	assignBit
      000111 C2 A0            [12]  810 	clr	_P2_0
                                    811 ;	assignBit
      000113 C2 A1            [12]  812 	clr	_P2_1
                                    813 ;	assignBit
      000115 C2 A2            [12]  814 	clr	_P2_2
                           000117   815 	C$main.c$80$2_0$49 ==.
                                    816 ;	main.c:80: break;
                           000117   817 	C$main.c$81$2_0$49 ==.
                                    818 ;	main.c:81: case(1):
      000117 80 36            [24]  819 	sjmp	00109$
      000119                        820 00102$:
                           000119   821 	C$main.c$82$2_0$49 ==.
                                    822 ;	main.c:82: P2_0=1;P2_1=0;P2_2=0;
                                    823 ;	assignBit
      000119 D2 A0            [12]  824 	setb	_P2_0
                                    825 ;	assignBit
      00011B C2 A1            [12]  826 	clr	_P2_1
                                    827 ;	assignBit
      00011D C2 A2            [12]  828 	clr	_P2_2
                           00011F   829 	C$main.c$83$2_0$49 ==.
                                    830 ;	main.c:83: break;
                           00011F   831 	C$main.c$84$2_0$49 ==.
                                    832 ;	main.c:84: case(2):
      00011F 80 2E            [24]  833 	sjmp	00109$
      000121                        834 00103$:
                           000121   835 	C$main.c$85$2_0$49 ==.
                                    836 ;	main.c:85: P2_0=0;P2_1=1;P2_2=0;
                                    837 ;	assignBit
      000121 C2 A0            [12]  838 	clr	_P2_0
                                    839 ;	assignBit
      000123 D2 A1            [12]  840 	setb	_P2_1
                                    841 ;	assignBit
      000125 C2 A2            [12]  842 	clr	_P2_2
                           000127   843 	C$main.c$86$2_0$49 ==.
                                    844 ;	main.c:86: break;
                           000127   845 	C$main.c$87$2_0$49 ==.
                                    846 ;	main.c:87: case(3):
      000127 80 26            [24]  847 	sjmp	00109$
      000129                        848 00104$:
                           000129   849 	C$main.c$88$2_0$49 ==.
                                    850 ;	main.c:88: P2_0=1;P2_1=1;P2_2=0;
                                    851 ;	assignBit
      000129 D2 A0            [12]  852 	setb	_P2_0
                                    853 ;	assignBit
      00012B D2 A1            [12]  854 	setb	_P2_1
                                    855 ;	assignBit
      00012D C2 A2            [12]  856 	clr	_P2_2
                           00012F   857 	C$main.c$89$2_0$49 ==.
                                    858 ;	main.c:89: break;
                           00012F   859 	C$main.c$90$2_0$49 ==.
                                    860 ;	main.c:90: case(4):
      00012F 80 1E            [24]  861 	sjmp	00109$
      000131                        862 00105$:
                           000131   863 	C$main.c$91$2_0$49 ==.
                                    864 ;	main.c:91: P2_0=0;P2_1=0;P2_2=1;
                                    865 ;	assignBit
      000131 C2 A0            [12]  866 	clr	_P2_0
                                    867 ;	assignBit
      000133 C2 A1            [12]  868 	clr	_P2_1
                                    869 ;	assignBit
      000135 D2 A2            [12]  870 	setb	_P2_2
                           000137   871 	C$main.c$92$2_0$49 ==.
                                    872 ;	main.c:92: break;
                           000137   873 	C$main.c$93$2_0$49 ==.
                                    874 ;	main.c:93: case(5):
      000137 80 16            [24]  875 	sjmp	00109$
      000139                        876 00106$:
                           000139   877 	C$main.c$94$2_0$49 ==.
                                    878 ;	main.c:94: P2_0=1;P2_1=0;P2_2=1;
                                    879 ;	assignBit
      000139 D2 A0            [12]  880 	setb	_P2_0
                                    881 ;	assignBit
      00013B C2 A1            [12]  882 	clr	_P2_1
                                    883 ;	assignBit
      00013D D2 A2            [12]  884 	setb	_P2_2
                           00013F   885 	C$main.c$95$2_0$49 ==.
                                    886 ;	main.c:95: break;
                           00013F   887 	C$main.c$96$2_0$49 ==.
                                    888 ;	main.c:96: case(6):
      00013F 80 0E            [24]  889 	sjmp	00109$
      000141                        890 00107$:
                           000141   891 	C$main.c$97$2_0$49 ==.
                                    892 ;	main.c:97: P2_0=0;P2_1=1;P2_2=1;
                                    893 ;	assignBit
      000141 C2 A0            [12]  894 	clr	_P2_0
                                    895 ;	assignBit
      000143 D2 A1            [12]  896 	setb	_P2_1
                                    897 ;	assignBit
      000145 D2 A2            [12]  898 	setb	_P2_2
                           000147   899 	C$main.c$98$2_0$49 ==.
                                    900 ;	main.c:98: break;
                           000147   901 	C$main.c$99$2_0$49 ==.
                                    902 ;	main.c:99: case(7):
      000147 80 06            [24]  903 	sjmp	00109$
      000149                        904 00108$:
                           000149   905 	C$main.c$100$2_0$49 ==.
                                    906 ;	main.c:100: P2_0=1;P2_1=1;P2_2=1;
                                    907 ;	assignBit
      000149 D2 A0            [12]  908 	setb	_P2_0
                                    909 ;	assignBit
      00014B D2 A1            [12]  910 	setb	_P2_1
                                    911 ;	assignBit
      00014D D2 A2            [12]  912 	setb	_P2_2
                           00014F   913 	C$main.c$103$1_0$48 ==.
                                    914 ;	main.c:103: }
      00014F                        915 00109$:
                           00014F   916 	C$main.c$104$1_0$48 ==.
                                    917 ;	main.c:104: ShowNumber(num);
      00014F 85*11 82         [24]  918 	mov	dpl,_DigDisplay_PARM_2
      000152 12r00r23         [24]  919 	lcall	_ShowNumber
                           000155   920 	C$main.c$105$1_0$48 ==.
                                    921 ;	main.c:105: }
                           000155   922 	C$main.c$105$1_0$48 ==.
                           000155   923 	XG$DigDisplay$0$0 ==.
      000155 22               [24]  924 	ret
                                    925 ;------------------------------------------------------------
                                    926 ;Allocation info for local variables in function 'Display'
                                    927 ;------------------------------------------------------------
                                    928 ;t                         Allocated to registers r5 r6 r7 
                                    929 ;------------------------------------------------------------
                           000156   930 	G$Display$0$0 ==.
                           000156   931 	C$main.c$107$1_0$51 ==.
                                    932 ;	main.c:107: void Display(u8 t[]){
                                    933 ;	-----------------------------------------
                                    934 ;	 function Display
                                    935 ;	-----------------------------------------
      000156                        936 _Display:
                           000156   937 	C$main.c$109$1_0$51 ==.
                                    938 ;	main.c:109: DigDisplay(0,t[0]);
      000156 AD 82            [24]  939 	mov	r5,dpl
      000158 AE 83            [24]  940 	mov	r6,dph
      00015A AF F0            [24]  941 	mov	r7,b
      00015C 12r00r00         [24]  942 	lcall	__gptrget
      00015F F5*11            [12]  943 	mov	_DigDisplay_PARM_2,a
      000161 75 82 00         [24]  944 	mov	dpl,#0x00
      000164 C0 07            [24]  945 	push	ar7
      000166 C0 06            [24]  946 	push	ar6
      000168 C0 05            [24]  947 	push	ar5
      00016A 12r00rE9         [24]  948 	lcall	_DigDisplay
      00016D D0 05            [24]  949 	pop	ar5
      00016F D0 06            [24]  950 	pop	ar6
      000171 D0 07            [24]  951 	pop	ar7
                           000173   952 	C$main.c$110$1_0$51 ==.
                                    953 ;	main.c:110: DigDisplay(4,t[1]);
      000173 74 01            [12]  954 	mov	a,#0x01
      000175 2D               [12]  955 	add	a,r5
      000176 FA               [12]  956 	mov	r2,a
      000177 E4               [12]  957 	clr	a
      000178 3E               [12]  958 	addc	a,r6
      000179 FB               [12]  959 	mov	r3,a
      00017A 8F 04            [24]  960 	mov	ar4,r7
      00017C 8A 82            [24]  961 	mov	dpl,r2
      00017E 8B 83            [24]  962 	mov	dph,r3
      000180 8C F0            [24]  963 	mov	b,r4
      000182 12r00r00         [24]  964 	lcall	__gptrget
      000185 F5*11            [12]  965 	mov	_DigDisplay_PARM_2,a
      000187 75 82 04         [24]  966 	mov	dpl,#0x04
      00018A C0 07            [24]  967 	push	ar7
      00018C C0 06            [24]  968 	push	ar6
      00018E C0 05            [24]  969 	push	ar5
      000190 12r00rE9         [24]  970 	lcall	_DigDisplay
      000193 D0 05            [24]  971 	pop	ar5
      000195 D0 06            [24]  972 	pop	ar6
      000197 D0 07            [24]  973 	pop	ar7
                           000199   974 	C$main.c$111$1_0$51 ==.
                                    975 ;	main.c:111: DigDisplay(2,t[2]);
      000199 74 02            [12]  976 	mov	a,#0x02
      00019B 2D               [12]  977 	add	a,r5
      00019C FA               [12]  978 	mov	r2,a
      00019D E4               [12]  979 	clr	a
      00019E 3E               [12]  980 	addc	a,r6
      00019F FB               [12]  981 	mov	r3,a
      0001A0 8F 04            [24]  982 	mov	ar4,r7
      0001A2 8A 82            [24]  983 	mov	dpl,r2
      0001A4 8B 83            [24]  984 	mov	dph,r3
      0001A6 8C F0            [24]  985 	mov	b,r4
      0001A8 12r00r00         [24]  986 	lcall	__gptrget
      0001AB F5*11            [12]  987 	mov	_DigDisplay_PARM_2,a
      0001AD 75 82 02         [24]  988 	mov	dpl,#0x02
      0001B0 C0 07            [24]  989 	push	ar7
      0001B2 C0 06            [24]  990 	push	ar6
      0001B4 C0 05            [24]  991 	push	ar5
      0001B6 12r00rE9         [24]  992 	lcall	_DigDisplay
      0001B9 D0 05            [24]  993 	pop	ar5
      0001BB D0 06            [24]  994 	pop	ar6
      0001BD D0 07            [24]  995 	pop	ar7
                           0001BF   996 	C$main.c$112$1_0$51 ==.
                                    997 ;	main.c:112: DigDisplay(6,t[3]);
      0001BF 74 03            [12]  998 	mov	a,#0x03
      0001C1 2D               [12]  999 	add	a,r5
      0001C2 FA               [12] 1000 	mov	r2,a
      0001C3 E4               [12] 1001 	clr	a
      0001C4 3E               [12] 1002 	addc	a,r6
      0001C5 FB               [12] 1003 	mov	r3,a
      0001C6 8F 04            [24] 1004 	mov	ar4,r7
      0001C8 8A 82            [24] 1005 	mov	dpl,r2
      0001CA 8B 83            [24] 1006 	mov	dph,r3
      0001CC 8C F0            [24] 1007 	mov	b,r4
      0001CE 12r00r00         [24] 1008 	lcall	__gptrget
      0001D1 F5*11            [12] 1009 	mov	_DigDisplay_PARM_2,a
      0001D3 75 82 06         [24] 1010 	mov	dpl,#0x06
      0001D6 C0 07            [24] 1011 	push	ar7
      0001D8 C0 06            [24] 1012 	push	ar6
      0001DA C0 05            [24] 1013 	push	ar5
      0001DC 12r00rE9         [24] 1014 	lcall	_DigDisplay
      0001DF D0 05            [24] 1015 	pop	ar5
      0001E1 D0 06            [24] 1016 	pop	ar6
      0001E3 D0 07            [24] 1017 	pop	ar7
                           0001E5  1018 	C$main.c$113$1_0$51 ==.
                                   1019 ;	main.c:113: DigDisplay(1,t[4]);
      0001E5 74 04            [12] 1020 	mov	a,#0x04
      0001E7 2D               [12] 1021 	add	a,r5
      0001E8 FA               [12] 1022 	mov	r2,a
      0001E9 E4               [12] 1023 	clr	a
      0001EA 3E               [12] 1024 	addc	a,r6
      0001EB FB               [12] 1025 	mov	r3,a
      0001EC 8F 04            [24] 1026 	mov	ar4,r7
      0001EE 8A 82            [24] 1027 	mov	dpl,r2
      0001F0 8B 83            [24] 1028 	mov	dph,r3
      0001F2 8C F0            [24] 1029 	mov	b,r4
      0001F4 12r00r00         [24] 1030 	lcall	__gptrget
      0001F7 F5*11            [12] 1031 	mov	_DigDisplay_PARM_2,a
      0001F9 75 82 01         [24] 1032 	mov	dpl,#0x01
      0001FC C0 07            [24] 1033 	push	ar7
      0001FE C0 06            [24] 1034 	push	ar6
      000200 C0 05            [24] 1035 	push	ar5
      000202 12r00rE9         [24] 1036 	lcall	_DigDisplay
      000205 D0 05            [24] 1037 	pop	ar5
      000207 D0 06            [24] 1038 	pop	ar6
      000209 D0 07            [24] 1039 	pop	ar7
                           00020B  1040 	C$main.c$114$1_0$51 ==.
                                   1041 ;	main.c:114: DigDisplay(5,t[5]);
      00020B 74 05            [12] 1042 	mov	a,#0x05
      00020D 2D               [12] 1043 	add	a,r5
      00020E FA               [12] 1044 	mov	r2,a
      00020F E4               [12] 1045 	clr	a
      000210 3E               [12] 1046 	addc	a,r6
      000211 FB               [12] 1047 	mov	r3,a
      000212 8F 04            [24] 1048 	mov	ar4,r7
      000214 8A 82            [24] 1049 	mov	dpl,r2
      000216 8B 83            [24] 1050 	mov	dph,r3
      000218 8C F0            [24] 1051 	mov	b,r4
      00021A 12r00r00         [24] 1052 	lcall	__gptrget
      00021D F5*11            [12] 1053 	mov	_DigDisplay_PARM_2,a
      00021F 75 82 05         [24] 1054 	mov	dpl,#0x05
      000222 C0 07            [24] 1055 	push	ar7
      000224 C0 06            [24] 1056 	push	ar6
      000226 C0 05            [24] 1057 	push	ar5
      000228 12r00rE9         [24] 1058 	lcall	_DigDisplay
      00022B D0 05            [24] 1059 	pop	ar5
      00022D D0 06            [24] 1060 	pop	ar6
      00022F D0 07            [24] 1061 	pop	ar7
                           000231  1062 	C$main.c$115$1_0$51 ==.
                                   1063 ;	main.c:115: DigDisplay(3,t[6]);
      000231 74 06            [12] 1064 	mov	a,#0x06
      000233 2D               [12] 1065 	add	a,r5
      000234 FA               [12] 1066 	mov	r2,a
      000235 E4               [12] 1067 	clr	a
      000236 3E               [12] 1068 	addc	a,r6
      000237 FB               [12] 1069 	mov	r3,a
      000238 8F 04            [24] 1070 	mov	ar4,r7
      00023A 8A 82            [24] 1071 	mov	dpl,r2
      00023C 8B 83            [24] 1072 	mov	dph,r3
      00023E 8C F0            [24] 1073 	mov	b,r4
      000240 12r00r00         [24] 1074 	lcall	__gptrget
      000243 F5*11            [12] 1075 	mov	_DigDisplay_PARM_2,a
      000245 75 82 03         [24] 1076 	mov	dpl,#0x03
      000248 C0 07            [24] 1077 	push	ar7
      00024A C0 06            [24] 1078 	push	ar6
      00024C C0 05            [24] 1079 	push	ar5
      00024E 12r00rE9         [24] 1080 	lcall	_DigDisplay
      000251 D0 05            [24] 1081 	pop	ar5
      000253 D0 06            [24] 1082 	pop	ar6
      000255 D0 07            [24] 1083 	pop	ar7
                           000257  1084 	C$main.c$116$1_0$51 ==.
                                   1085 ;	main.c:116: DigDisplay(7,t[7]);
      000257 74 07            [12] 1086 	mov	a,#0x07
      000259 2D               [12] 1087 	add	a,r5
      00025A FD               [12] 1088 	mov	r5,a
      00025B E4               [12] 1089 	clr	a
      00025C 3E               [12] 1090 	addc	a,r6
      00025D FE               [12] 1091 	mov	r6,a
      00025E 8D 82            [24] 1092 	mov	dpl,r5
      000260 8E 83            [24] 1093 	mov	dph,r6
      000262 8F F0            [24] 1094 	mov	b,r7
      000264 12r00r00         [24] 1095 	lcall	__gptrget
      000267 F5*11            [12] 1096 	mov	_DigDisplay_PARM_2,a
      000269 75 82 07         [24] 1097 	mov	dpl,#0x07
      00026C 12r00rE9         [24] 1098 	lcall	_DigDisplay
                           00026F  1099 	C$main.c$117$1_0$51 ==.
                                   1100 ;	main.c:117: }
                           00026F  1101 	C$main.c$117$1_0$51 ==.
                           00026F  1102 	XG$Display$0$0 ==.
      00026F 22               [24] 1103 	ret
                                   1104 ;------------------------------------------------------------
                                   1105 ;Allocation info for local variables in function 'main'
                                   1106 ;------------------------------------------------------------
                                   1107 ;a                         Allocated to registers 
                                   1108 ;b                         Allocated to registers r6 r7 
                                   1109 ;c                         Allocated with name '_main_c_65536_53'
                                   1110 ;------------------------------------------------------------
                           000270  1111 	G$main$0$0 ==.
                           000270  1112 	C$main.c$119$1_0$53 ==.
                                   1113 ;	main.c:119: void main(void)
                                   1114 ;	-----------------------------------------
                                   1115 ;	 function main
                                   1116 ;	-----------------------------------------
      000270                       1117 _main:
                           000270  1118 	C$main.c$121$2_0$53 ==.
                                   1119 ;	main.c:121: u8* a = "F19900000";
                           000270  1120 	C$main.c$122$2_0$53 ==.
                                   1121 ;	main.c:122: int b =0;
      000270 7E 00            [12] 1122 	mov	r6,#0x00
      000272 7F 00            [12] 1123 	mov	r7,#0x00
                           000274  1124 	C$main.c$124$1_0$53 ==.
                                   1125 ;	main.c:124: while(1){
      000274                       1126 00112$:
                           000274  1127 	C$main.c$125$2_0$54 ==.
                                   1128 ;	main.c:125: sprintf(c,"%d",b);
      000274 C0 07            [24] 1129 	push	ar7
      000276 C0 06            [24] 1130 	push	ar6
      000278 C0 06            [24] 1131 	push	ar6
      00027A C0 07            [24] 1132 	push	ar7
      00027C 74r0A            [12] 1133 	mov	a,#___str_1
      00027E C0 E0            [24] 1134 	push	acc
      000280 74s00            [12] 1135 	mov	a,#(___str_1 >> 8)
      000282 C0 E0            [24] 1136 	push	acc
      000284 74 80            [12] 1137 	mov	a,#0x80
      000286 C0 E0            [24] 1138 	push	acc
      000288 74r12            [12] 1139 	mov	a,#_main_c_65536_53
      00028A C0 E0            [24] 1140 	push	acc
      00028C 74s00            [12] 1141 	mov	a,#(_main_c_65536_53 >> 8)
      00028E C0 E0            [24] 1142 	push	acc
      000290 74 40            [12] 1143 	mov	a,#0x40
      000292 C0 E0            [24] 1144 	push	acc
      000294 12r00r00         [24] 1145 	lcall	_sprintf
      000297 E5 81            [12] 1146 	mov	a,sp
      000299 24 F8            [12] 1147 	add	a,#0xf8
      00029B F5 81            [12] 1148 	mov	sp,a
      00029D D0 06            [24] 1149 	pop	ar6
      00029F D0 07            [24] 1150 	pop	ar7
                           0002A1  1151 	C$main.c$126$2_0$54 ==.
                                   1152 ;	main.c:126: b++;
      0002A1 0E               [12] 1153 	inc	r6
      0002A2 BE 00 01         [24] 1154 	cjne	r6,#0x00,00136$
      0002A5 0F               [12] 1155 	inc	r7
      0002A6                       1156 00136$:
                           0002A6  1157 	C$main.c$128$2_0$54 ==.
                                   1158 ;	main.c:128: if(b>=100 && b <= 200){
      0002A6 C3               [12] 1159 	clr	c
      0002A7 EE               [12] 1160 	mov	a,r6
      0002A8 94 64            [12] 1161 	subb	a,#0x64
      0002AA EF               [12] 1162 	mov	a,r7
      0002AB 64 80            [12] 1163 	xrl	a,#0x80
      0002AD 94 80            [12] 1164 	subb	a,#0x80
      0002AF 40 21            [24] 1165 	jc	00108$
      0002B1 74 C8            [12] 1166 	mov	a,#0xc8
      0002B3 9E               [12] 1167 	subb	a,r6
      0002B4 74 80            [12] 1168 	mov	a,#(0x00 ^ 0x80)
      0002B6 8F F0            [24] 1169 	mov	b,r7
      0002B8 63 F0 80         [24] 1170 	xrl	b,#0x80
      0002BB 95 F0            [12] 1171 	subb	a,b
      0002BD 40 13            [24] 1172 	jc	00108$
                           0002BF  1173 	C$main.c$129$3_0$55 ==.
                                   1174 ;	main.c:129: Display("F22220000");
      0002BF 90r00r0D         [24] 1175 	mov	dptr,#___str_2
      0002C2 75 F0 80         [24] 1176 	mov	b,#0x80
      0002C5 C0 07            [24] 1177 	push	ar7
      0002C7 C0 06            [24] 1178 	push	ar6
      0002C9 12r01r56         [24] 1179 	lcall	_Display
      0002CC D0 06            [24] 1180 	pop	ar6
      0002CE D0 07            [24] 1181 	pop	ar7
      0002D0 80 A2            [24] 1182 	sjmp	00112$
      0002D2                       1183 00108$:
                           0002D2  1184 	C$main.c$130$2_0$54 ==.
                                   1185 ;	main.c:130: } else if (b>200){
      0002D2 C3               [12] 1186 	clr	c
      0002D3 74 C8            [12] 1187 	mov	a,#0xc8
      0002D5 9E               [12] 1188 	subb	a,r6
      0002D6 74 80            [12] 1189 	mov	a,#(0x00 ^ 0x80)
      0002D8 8F F0            [24] 1190 	mov	b,r7
      0002DA 63 F0 80         [24] 1191 	xrl	b,#0x80
      0002DD 95 F0            [12] 1192 	subb	a,b
      0002DF 50 14            [24] 1193 	jnc	00105$
                           0002E1  1194 	C$main.c$131$3_0$56 ==.
                                   1195 ;	main.c:131: Display(c);
      0002E1 90r00r12         [24] 1196 	mov	dptr,#_main_c_65536_53
      0002E4 75 F0 40         [24] 1197 	mov	b,#0x40
      0002E7 C0 07            [24] 1198 	push	ar7
      0002E9 C0 06            [24] 1199 	push	ar6
      0002EB 12r01r56         [24] 1200 	lcall	_Display
      0002EE D0 06            [24] 1201 	pop	ar6
      0002F0 D0 07            [24] 1202 	pop	ar7
      0002F2 02r02r74         [24] 1203 	ljmp	00112$
      0002F5                       1204 00105$:
                           0002F5  1205 	C$main.c$133$2_0$54 ==.
                                   1206 ;	main.c:133: else if(b<100){
      0002F5 C3               [12] 1207 	clr	c
      0002F6 EE               [12] 1208 	mov	a,r6
      0002F7 94 64            [12] 1209 	subb	a,#0x64
      0002F9 EF               [12] 1210 	mov	a,r7
      0002FA 64 80            [12] 1211 	xrl	a,#0x80
      0002FC 94 80            [12] 1212 	subb	a,#0x80
      0002FE 50 14            [24] 1213 	jnc	00102$
                           000300  1214 	C$main.c$134$3_0$57 ==.
                                   1215 ;	main.c:134: Display(a);
      000300 90r00r00         [24] 1216 	mov	dptr,#___str_0
      000303 75 F0 80         [24] 1217 	mov	b,#0x80
      000306 C0 07            [24] 1218 	push	ar7
      000308 C0 06            [24] 1219 	push	ar6
      00030A 12r01r56         [24] 1220 	lcall	_Display
      00030D D0 06            [24] 1221 	pop	ar6
      00030F D0 07            [24] 1222 	pop	ar7
      000311 02r02r74         [24] 1223 	ljmp	00112$
      000314                       1224 00102$:
                           000314  1225 	C$main.c$136$3_0$58 ==.
                                   1226 ;	main.c:136: b=0;
      000314 7E 00            [12] 1227 	mov	r6,#0x00
      000316 7F 00            [12] 1228 	mov	r7,#0x00
      000318 02r02r74         [24] 1229 	ljmp	00112$
                           00031B  1230 	C$main.c$139$1_0$53 ==.
                                   1231 ;	main.c:139: }
                           00031B  1232 	C$main.c$139$1_0$53 ==.
                           00031B  1233 	XG$main$0$0 ==.
      00031B 22               [24] 1234 	ret
                                   1235 	.area CSEG    (CODE)
                                   1236 	.area CONST   (CODE)
                           000000  1237 Fmain$__str_0$0_0$0 == .
                                   1238 	.area CONST   (CODE)
      000000                       1239 ___str_0:
      000000 46 31 39 39 30 30 30  1240 	.ascii "F19900000"
             30 30
      000009 00                    1241 	.db 0x00
                                   1242 	.area CSEG    (CODE)
                           00031C  1243 Fmain$__str_1$0_0$0 == .
                                   1244 	.area CONST   (CODE)
      00000A                       1245 ___str_1:
      00000A 25 64                 1246 	.ascii "%d"
      00000C 00                    1247 	.db 0x00
                                   1248 	.area CSEG    (CODE)
                           00031C  1249 Fmain$__str_2$0_0$0 == .
                                   1250 	.area CONST   (CODE)
      00000D                       1251 ___str_2:
      00000D 46 32 32 32 32 30 30  1252 	.ascii "F22220000"
             30 30
      000016 00                    1253 	.db 0x00
                                   1254 	.area CSEG    (CODE)
                                   1255 	.area XINIT   (CODE)
                                   1256 	.area CABS    (ABS,CODE)
